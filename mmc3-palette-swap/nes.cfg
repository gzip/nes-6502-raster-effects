MEMORY {
  ZEROPAGE: start=$0, size=$ff;
  STACK: start=$0100, size=$0100;
  OAMBUFFER: start=$0200, size=$0100;
  RAM: start=$0300, size=$0500;

  HEADER: start = $0000, size = $10,   type = ro,            fill=yes, fillval=$00;
  ROM_0:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_1:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_2:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_3:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_4:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_5:  start = $8000, size = $2000, type = ro, file = %O, fill=yes, fillval=$FF;
  ROM_FIXED:  start = $C000, size = $4000, type = ro, file = %O, fill=yes, fillval=$FF;

  CHRROM_: start=$0000, size=$20000;
}

SEGMENTS {
  HEADER: load=HEADER, type=ro, align=$10;
  ZEROPAGE: load=ZEROPAGE, type=zp;
  STACK: load=STACK, type=bss, optional=yes;
  OAM: load=OAMBUFFER, type=bss, optional=yes;
  BSS: load=RAM, type=bss, optional=yes;

  DMC:      load = ROM_FIXED, type = ro, align = 64, optional = yes;
  RESET:    load = ROM_FIXED, type = ro, align = $100;
  CODE:     load = ROM_FIXED, type = ro, align = $100;
  RODATA:   load = ROM_FIXED, type = ro, align = $100;

  VECTORS: load=ROM_FIXED, type=ro, start=$FFFA;
  CHR: load=CHRROM_, type=ro, align=16, optional=yes;
}

FILES {
  %O: format = bin;
}